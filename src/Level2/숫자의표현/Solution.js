function solution(n) {
  // 분석
  // 단순하게 늘려가면서 일치하면 카운트하고
  // 아니면 다시 시작 숫자를 바꿔서 연속 조합을 찾아보자.
  
  // 풀이 1
  // 카운트 및 합계 변수를 선언하고 반복문을 시행한다.
  // 반복문의 이중으로 만들고, n의 절반까지만 더해준다.
  // 절반이 넘어가면 연속되는 숫자가 n을 초과할 것이기 때문이다.
  // 첫 반복문은 항상 값의 시작점을 잡는 역할이고, 
  // 두번째 반복문은 시작점부터 마지막 절반값까지 합산을 하는 역할이다.
  // 첫 반복문은 절반값을 내림까지만, 두 번째 반복문은 올림까지만 돌린다.
  // 짝수 일때는 괜찮으나 홀수 일때는 나누어 떨어지지 않기 때문에
  // 절반의 내림값과 올림값의 합이 n과 같을 수밖에 없다.
  let count = 0;
  let sum = 0;
  for (let i = 1; i <= Math.floor(n / 2); ++i) {
      for (let j = i; j <= Math.ceil(n / 2); ++j) {
          sum += j;
          if (sum === n) {
              ++count;
              sum = 0;
              break;
          }
          else if (sum > n) {
              sum = 0;
              break;
          }
      }
  }
  
  // n은 그 자체로도 연속 1번의 n을 만족하기 때문에 1을 합산해서 리턴한다.
  return count + 1;
}