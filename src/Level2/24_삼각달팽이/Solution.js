function solution(n) {
  // 분석
  // 그냥 배열을 만들고 돌면서 채워넣으면 풀 수 있는 문제이다.
  
  // 풀이
  // 1. 빈배열 선언하고 삼각형의 형태로 배열을 만들어준다.
  const arr = [];
  for (let i = 1; i <= n; ++i) {
      arr.push(new Array(i));
  }
  
  // 2. 늘어나는 숫자 및 변화해갈 좌표의 초기값도 선언한다.
  let num = 0;
  let row = -1;
  let col = 0;
  
  // 3. while문 속에, 한 사이클마다 삼면을 채울 3개의 반복문을 만든다.
  // 4. n은 for문 하나가 끝날때마다 1씩 줄여줘야 한다. 
  // n이 4라고 치면 처음엔 4곳을 채우지만
  // 그다음은 3곳 그다음은 2곳... 삼각달팽이로 들어갈수록 
  // 점점 채울 영역이 1씩 줄어들기 때문이다.
  while (n > 0) {
      // 1번 반복문은 행만 +로 변하고 열은 고정이다.
      for (let i = 0; i < n; ++i) {
          arr[++row][col] = ++num;
      }
      // 2번 반복문은 행은 고정이고 열만 변한다.
      for (let i = 0; i < n - 1; ++i) {
          arr[row][++col] = ++num;
      }
      // 3번 반복문은 행만 -로 변하고 열은 고정이다.
      for (let i = 0; i < n - 2; ++i) {
          arr[--row][--col] = ++num;
      }
      // n의 실질적 감소분을 적용한다. 한 사이클마다 3번의 반복문을 돌기 때문에 -3;
      n -= 3;
  }
  
  // 5. 리듀스로 순차적으로 합쳐주면서 마무리 한다.
  return arr.reduce((acc, curr) => {
      acc.push(...curr);
      return acc;
  }, [])
}