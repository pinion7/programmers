function solution(n) {
  // 풀이 2 (다른 사람의 문제 분석을 참고한 풀이법)
  // n의 약수 중 '홀수'인 약수의 개수가
  // n을 만들 수 있는 연속된 숫자의 경우의 수의 개수와 같다.
  // n의 제곱근 값을 구하고, 정수부까지만 자른 값까지만 반복문을 돌려준다.
  // 약수는 절반까지만 체크해도 전부 구할 수 있기 때문이다.
  let count = 0;
  let sqrtN = parseInt(Math.sqrt(n));
  for (let i = 1; i <= sqrtN; ++i) {
      // i가 약수이면서 홀수이면 카운트를 올린다.
      // i가 약수라는 건 몫(j)도 약수인 것. 그것도 체크한다.
      // 단, i, j가 같으면 하나의 약수라는 점만 주의한다.
      let j = n / i;
      if (n % i === 0) {
          if (i % 2 === 1) ++count;
          if (j % 2 === 1 && j !== i) ++count;
      }
  }
  
  return count;
}