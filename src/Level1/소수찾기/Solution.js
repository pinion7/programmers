function solution(n) {
  // 분석
  // 소수를 구하는 방법을 이해해야 한다.
  // 소수는 자기 자신과 1로만 나누어 떨어진다.
  // 1은 소수가 아니기 때문에, 본래는 2부터 n직전까지 반복문을 돌리면서 체크해주면 된다.
  // 하지만 제곱근과 소수의 관계를 안다면 더 효율적으로 풀 수도 있다.
  // 루트 n을 씌워 소수점을 자른 값까지만 체크하면 n이 소수인지 아닌지를 파악할 수 있기 때문이다.
  
  // 풀이
  // 1. 소수 체킹 함수를 구현한다.
  const isPrime = (num) => {
      // 2. 우선 2로 나누어 떨어지는지 체크 한다.
      if (num % 2 === 0) return false;
      
      // 3. 제곱근의 정수 부분만 남긴 값으로 변환시키고
      let newNum = parseInt(Math.sqrt(num));
      
      // 4. 3부터 변환한 값까지로 나누어 떨어지는지 체크
      for (let i = 3; i <= newNum; i += 2) {
          if (num % i === 0) return false;
      }
      return true;
  }
  
  // 5. 카운트를 선언하고 반복문을 돌린다.
  // 6. count는 1로 준다. 2는 짝수 중 유일한 소수이기 때문에 카운트를 하고 시작한다.
  let count = 1;
  
  // 7. 부터 시작해서 n까지 돌린다. 소수인지 아닌지는 구현한 함수부로 체크한다.
  for (let i = 3; i <= n; ++i) {
      if (isPrime(i)) ++count;
  }
  return count;
}