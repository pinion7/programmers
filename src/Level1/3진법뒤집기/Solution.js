function solution(n) {
  // 분석
  // 10진법 -> 타 진법 변환은 타진법의 수로 나누면서 진행하게 되는데,
  // 가령 나누었을 때, 몫은 다음에 나눠줄 값이 되고, 나머지는 1의 자리, 10의자리 순으로 채워가게 된다.
  // 그러다가 몫이 0이 나오는 순간 연산을 끝내고, 직전 몫을 가장 앞자리에 배치시키면 완성이다.
  // 그렇게 완성된 몫을 뒤집고 다시 10진법으로 변환시켜야 하는데 타진법 -> 10진법 변환은
  // 일의 자리 * 해당진법의^0 + 십의자리 * 해당진법^1 + 백의자리 * 해당진법^2... 으로 구할 수 있다.
  // 위 과정을 진행하면 결과값 도출이 가능할 것이다.
  
  // 풀이
  const newArr = [];
  // while 써서 조건 내에선 나머지 값을 쌓아가고, n은 새로운 몫으로 바꿔주며, 탈출하는 순간 마지막 n 삽입
  while (parseInt(n / 3) !== 0) {
    newArr.unshift(n % 3)
    n = parseInt(n / 3);
  }
  newArr.unshift(n);
  
  // reduce로 합산해주면서 리턴하면 끝
  // 딱히 배열 뒤집을 필요도 없다. 어차피 idx 0부터 낮은자리수 제곱을 계산할 것이기 때문에
  return newArr.reduce((acc, curr, idx) => {
      return acc += curr * Math.pow(3, idx)
  }, 0)
}